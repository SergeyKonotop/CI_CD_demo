node {
  properties([
   parameters([
    string(name: 'Version', defaultValue: '1', description: 'Build version', ),
    [$class: 'ExtensibleChoiceParameterDefinition', 
    choiceListProvider:
     [$class: 'TextareaChoiceListProvider', 
      addEditedValue: false, choiceListText: '''QA
CI
DevTools
''', defaultChoice: 'QA'], 
     description: 'Target evironment', 
     editable: false, 
     name: 'ENV_NAME'
     ]])])

   def server = Artifactory.server 'Artifactory_server'
   def buildInfo = Artifactory.newBuildInfo()
   def downloadSpec = """{
     "files": [
       {
          "pattern": "test_folder/$Version/*.jar",
          "target": "target/"
        }
     ]
    }"""
   stage('Download Git') { // for display purposes
      // Get some code from a GitHub repository
      git 'https://github.com/SergeyKonotop/CI_CD_demo.git'
      mvnHome = tool 'maven_3.3.9'
   }
   stage('Get build from Artifactory') {
      server.download(downloadSpec)
   }
   stage('Docker image build to registry') {
      sh "mv ./target/$Version/*.jar ./target/ -f" 
      docker.withRegistry('http://172.28.128.8:5000') {  
       def testImage = docker.build("172.28.128.8:5000/test-jimage"/*, "./target/$BUILD_ID" */)               
        testImage.push()
        sh "docker rmi 172.28.128.8:5000/test-jimage "
      }
   }    

   stage('Deploy') { // for display purposes
   if ( ENV_NAME == 'QA' ) { 
      ansiblePlaybook(
         inventory: './ansible/inv/QA', 
         playbook: './ansible/playbook/QA.yml'
    )
   } else if ( ENV_NAME == 'CI' ) {
      ansiblePlaybook(
         inventory: './ansible/inv/CI', 
         playbook: './ansible/playbook/CI.yml'
    )
   } else {
      ansiblePlaybook(
         inventory: './ansible/inv/DevTools', 
         playbook: './ansible/playbook/DevTools.yml'
    )
   }
   } 
}